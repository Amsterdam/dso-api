version: "3.7"
services:
  # This Postgres container is used for testing by Jenkins.
  # The actual deployment uses a database configured separately.
  # For development, use the one from dataservices-airflow;
  # see dev-docs/source/howto/install.rst.
  database:
    image: amsterdam/postgres11
    ports:
      - "5415:5432"
    environment:
      POSTGRES_DB: dataservices
      POSTGRES_USER: dataservices
      POSTGRES_PASSWORD: insecure
    volumes:
      - "~/.ssh/datapunt.key:/root/.ssh/datapunt.key"
      - .:/host
    extra_hosts:
      admin.data.amsterdam.nl: 10.243.16.4
  web:
    build:
      context: src/
      args:
        PIP_REQUIREMENTS: requirements_dev.txt
    ports:
      - "8090:8000"
    links:
      - database
    environment:
      UWSGI_HTTP_SOCKET: ":8000"
      UWSGI_MODULE: "dso_api.wsgi"
      UWSGI_CALLABLE: "application"
      UWSGI_MASTER: 1
      UWSGI_STATIC_MAP: "/dso_api/static=/static"
      SECRET_KEY: insecure
      DATABASE_URL: "${DATABASE_URL:-postgres://dataservices:insecure@database/dataservices}"
      DJANGO_LOG_LEVEL: "${DJANGO_LOG_LEVEL}"
      DSO_API_LOG_LEVEL: "${DSO_API_LOG_LEVEL}"
      DSO_API_AUDIT_LOG_LEVEL: "${DSO_API_AUDIT_LOG_LEVEL}"
      AZURE_APPI_AUDIT_CONNECTION_STRING: "${AZURE_APPI_AUDIT_CONNECTION_STRING}"
      AZURE_APPI_CONNECTION_STRING: "${AZURE_APPI_CONNECTION_STRING}"
      OAUTH_CLIENT_ID: "${OAUTH_CLIENT_ID}"
      OAUTH_JWKS_URL: "${OAUTH_JWKS_URL}"
      OAUTH_URL:  "${OAUTH_URL}"
      CLOUD_ENV: "${CLOUD_ENV}"
      DATAPUNT_API_URL: "${DATAPUNT_API_URL}"
      DJANGO_DEBUG: 1
    volumes:
      - ./src:/app
      - ./docs/build/html:/docs-static
      - "../amsterdam-schema/datasets:/tmp/datasets"
      # - "../schema-tools/src/schematools:/usr/local/lib/python3.9/site-packages/schematools"
    command: uwsgi --py-auto-reload=1 --enable-threads --lazy-apps

  schemas:
    image: nginx
    ports:
      - "8080:80"
    volumes:
      - "./schemas/data/datasets:/usr/share/nginx/html/datasets"
      - "./schemas/conf/default.conf:/etc/nginx/conf.d/default.conf"

  docs:
    build:
      context: ./docs
      dockerfile: Dockerfile-local
    environment:
      DATABASE_URL: "postgres://dataservices:insecure@database/dataservices"
    volumes:
      - "./docs:/docs"
    ports:
      - "8081:80"
