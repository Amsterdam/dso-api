{"name": "test_documentdate_formatcheck", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "@allure.step(\"Validate documentdatum format as `date` for the API Call `https://acc.api.data.amsterdam.nl/v1/gebieden/wijken/03630970000000.2`\")\n    def test_documentdate_formatcheck():\n    \n        \"\"\"Check the documment date format as date.\"\"\"\n    \n        gebiwijkenresp = requests.get(datasetconstantgebiedenwijken.dataset_url + \"03630970000000.2\")\n>       gebiwijkendate = gebiwijkenresp.json()\n\ne2etest/test_datasetgebiedenwijken.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../venv/lib/python3.8/site-packages/requests/models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\n/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x10b202160>\ns = '<html lang=\"nl\">\\n    <head>\\n    <meta charset=\"UTF-8\">\\n    <link rel=\"stylesheet\" href=\"https://fast.fonts.net/css...m dan <a href=\"mailto:datapunt@amsterdam.nl\">contact</a> met ons op.</div>\\n    </div>\\n    </div>\\n</body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/json/decoder.py:355: JSONDecodeError"}, "description": "Check the documment date format as date.", "steps": [{"name": "Validate documentdatum format as `date` for the API Call `https://acc.api.data.amsterdam.nl/v1/gebieden/wijken/03630970000000.2`", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n", "trace": "  File \"/Users/jeswaran/projects/dso-api/venv/lib/python3.8/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/Users/jeswaran/projects/dso-api/src/e2etest/test_datasetgebiedenwijken.py\", line 55, in test_documentdate_formatcheck\n    gebiwijkendate = gebiwijkenresp.json()\n  File \"/Users/jeswaran/projects/dso-api/venv/lib/python3.8/site-packages/requests/models.py\", line 900, in json\n    return complexjson.loads(self.text, **kwargs)\n  File \"/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/json/__init__.py\", line 357, in loads\n    return _default_decoder.decode(s)\n  File \"/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/json/decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/json/decoder.py\", line 355, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\n"}, "start": 1647271074264, "stop": 1647271074330}], "start": 1647271074264, "stop": 1647271074331, "uuid": "9634e0ff-70bc-4571-a98f-18852a6e38e2", "historyId": "e13adf00151d33a7fd72d333d0f42023", "testCaseId": "bb5f481dae360cd68882deb05be289e9", "fullName": "e2etest.test_datasetgebiedenwijken#test_documentdate_formatcheck", "labels": [{"name": "parentSuite", "value": "e2etest"}, {"name": "suite", "value": "test_datasetgebiedenwijken"}, {"name": "host", "value": "Jayashrees-MBP.domain_not_set.invalid"}, {"name": "thread", "value": "85835-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2etest.test_datasetgebiedenwijken"}]}