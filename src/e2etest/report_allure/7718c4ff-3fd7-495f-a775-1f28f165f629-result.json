{"name": "test_collection_notfound_with_credendtials", "status": "failed", "statusDetails": {"message": "AssertionError: Status code not match\nassert 403 == 404\n +  where 403 = <Response [403]>.status_code", "trace": "auth_header = {'Authorization': 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJXNTRsQzhsei1Yek9tVDhOMDFCTXdXLXlYbTFodGpH...CMGXEnozlNKjD8dDs2ndSDJMNq4ZB2whFib1A-2Kv3pBmonDnFAFFFIljwJimj1xblFMuprrWp7x3CDX7PussjUbMXnTnF5OtrnnyYiARzoqkJu-zQC2Q'}\n\n    @allure.step(\"API Call `https://acc.api.data.amsterdam.nl/v1/standvastgoed/gebouwen/2022-01-01.03632000002059CC/?nummeraanduidingVolgnummer=3` to validate whether the no record found with `failure code 404`\")\n    def test_collection_notfound_with_credendtials(auth_header):\n    \n        \"\"\"Prove that getting the collection is not found without credentials.\"\"\"\n        response = requests.get(dataconstantstandvastgoed.dataset_url_parameter, headers=auth_header)\n>       assert response.status_code == 404, \"Status code not match\"\nE       AssertionError: Status code not match\nE       assert 403 == 404\nE        +  where 403 = <Response [403]>.status_code\n\ne2etest/test_datasetstandvastgoed.py:123: AssertionError"}, "description": "Prove that getting the collection is not found without credentials.", "steps": [{"name": "API Call `https://acc.api.data.amsterdam.nl/v1/standvastgoed/gebouwen/2022-01-01.03632000002059CC/?nummeraanduidingVolgnummer=3` to validate whether the no record found with `failure code 404`", "status": "failed", "statusDetails": {"message": "AssertionError: Status code not match\nassert 403 == 404\n +  where 403 = <Response [403]>.status_code\n", "trace": "  File \"/Users/jeswaran/projects/dso-api/venv/lib/python3.8/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/Users/jeswaran/projects/dso-api/src/e2etest/test_datasetstandvastgoed.py\", line 123, in test_collection_notfound_with_credendtials\n    assert response.status_code == 404, \"Status code not match\"\n"}, "parameters": [{"name": "auth_header", "value": "{'Authorization': 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJXNTRsQzhsei1Yek9tVDhOMDFCTXdXLXlYbTFodGpHRlBRR0FUQm1SNU9BIn0.eyJleHAiOjE2NDcyNzEzNzYsImlhdCI6MTY0NzI3MTA3NiwianRpIjoiMjA2ODIyNmUtMGVhYi00ZTZlLWI5YmEtMjc3MmI1ZThjMjM4IiwiaXNzIjoiaHR0cHM6Ly9pYW0uYW1zdGVyZGFtLm5sL2F1dGgvcmVhbG1zL2RhdGFwdW50LWFkLWFjYyIsInN1YiI6IjEyYjc0YzZmLTRhNmUtNGFmMi05NzUzLTk1Yjg0MjdjMDE4MCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRhdGFkaWVuc3Rlbi10ZXN0IiwiYWNyIjoiMSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJmcF9zdHVyaW5nc21pZGRlbGVuIiwiZnBfbWR3Il19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsImNsaWVudEhvc3QiOiIxNDEuMjI0LjIxOC4yMTMiLCJjbGllbnRJZCI6ImRhdGFkaWVuc3Rlbi10ZXN0IiwicHJlZmVycmVkX3VzZXJuYW1lIjoic2VydmljZS1hY2NvdW50LWRhdGFkaWVuc3Rlbi10ZXN0IiwiY2xpZW50QWRkcmVzcyI6IjE0MS4yMjQuMjE4LjIxMyJ9.IQtKLmC_drooPDQoinwndE9nzWn2dibHhcE9E4B-nC_WjptC_RpOj68CJ2Mq5ZY3tKi8QCaBYlEU1lLPRTc6Pa6i9EAOrARD8--5SQmvzl811LB-kFe8D3oxna0bE62GMV-KNbyXe3jVDv9VmfHaH01QqPkOs6QNQx6J_w1r5GkYH2oIop0Btft5K9pM6xyAeA9EojBHHDYlHWpe9NxKe7f1ZKgANbspgCMGXEnozlNKjD8dDs2ndSDJMNq4ZB2whFib1A-2Kv3pBmonDnFAFFFIljwJimj1xblFMuprrWp7x3CDX7PussjUbMXnTnF5OtrnnyYiARzoqkJu-zQC2Q'}"}], "start": 1647271077477, "stop": 1647271077537}], "start": 1647271077476, "stop": 1647271077537, "uuid": "12ccf476-e293-47a4-b04d-60f3db5ae8ad", "historyId": "e3b09f7987ff7719a8429ff412049ebb", "testCaseId": "bc836574b4b6c1f238f62ece44c1d414", "fullName": "e2etest.test_datasetstandvastgoed#test_collection_notfound_with_credendtials", "labels": [{"name": "parentSuite", "value": "e2etest"}, {"name": "suite", "value": "test_datasetstandvastgoed"}, {"name": "host", "value": "Jayashrees-MBP.domain_not_set.invalid"}, {"name": "thread", "value": "85835-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2etest.test_datasetstandvastgoed"}]}