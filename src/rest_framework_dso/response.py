from http.client import responses
from inspect import isgenerator

from django.http import StreamingHttpResponse
from rest_framework.response import Response

from rest_framework_dso.serializer_helpers import ReturnGenerator


class StreamingResponse(StreamingHttpResponse):
    """A reimplementation of the DRF 'Response' class
    that provides actual streaming content.

    While it's possible to submit a generator to the DRF Response class,
    it will concatenate the results in-memory when reading
    the HttpResponse.content property.
    """

    def __init__(
        self,
        data=None,
        status=None,
        template_name=None,
        headers=None,
        exception=False,
        content_type=None,
    ):
        if not isgenerator(data) and not isinstance(data, ReturnGenerator):
            raise ValueError(
                f"Expected generator for StreamingResponse, not type {data.__class__.__name__}"
            )

        # Note that StreamingHttpResponse.__init__() sets .streaming_content
        super().__init__(self._read_rendered_content(), status=status)

        # Similar to DRF Response
        self.data = data
        self.template_name = template_name
        self.exception = exception
        self.content_type = content_type

        if headers:
            for name, value in headers.items():
                self[name] = value

    @classmethod
    def from_response(cls, response: Response):
        """Convert a regular DRF Response into this streaming response."""
        streaming_response = cls(
            response.data,
            status=response.status_code,
            template_name=response.template_name,
            headers=dict(response.items()),
            content_type=response.content_type,
        )

        # Copy DRF attributes from finalize_response()
        if hasattr(response, "accepted_renderer"):
            streaming_response.accepted_renderer = response.accepted_renderer
            streaming_response.accepted_media_type = response.accepted_media_type
            streaming_response.renderer_context = response.renderer_context

        return streaming_response

    def _read_rendered_content(self):
        """Wrap the retrieval of the stream data. This is applied to self.streaming_content."""
        # Calling the original DRF Response.rendered_content is sufficient, it
        # can read all attributes from this class and produce the stream.
        stream = Response.rendered_content.__get__(self)
        if not isgenerator(stream):
            raise RuntimeError(
                f"No stream generated by {self.accepted_renderer.__class__.__name__}"
            )

        yield from stream

    @property
    def status_text(self):
        """Copied from DRF Response class"""
        return responses.get(self.status_code, "")

    def __getstate__(self):
        """Copied from DRF Response class.
        Remove attributes from the response that shouldn't be cached.
        """
        state = super().__getstate__()
        for key in (
            "accepted_renderer",
            "renderer_context",
            "resolver_match",
            "client",
            "request",
            "json",
            "wsgi_request",
        ):
            if key in state:
                del state[key]
        state["_closable_objects"] = []
        return state
