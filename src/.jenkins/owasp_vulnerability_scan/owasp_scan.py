import time
from pprint import pprint

from zapv2 import ZAPv2


def test_owasp_check():
    """Prove that there are no HIGH risk vulnerabilities detected"""
    # The URL of the application to be tested
    target = "https://acc.api.data.amsterdam.nl/v1/bag/"
    apiKey = None

    # setup ZAP connection and point to ZAP proxy (a docker container)
    # You can also access the ZAP GUI (and envoke scans or get data)
    # by browsing to localhost:8090
    zap = ZAPv2(
        apikey=apiKey,
        proxies={"http": "http://owasp:8090", "https": "https://owasp:8090"},
    )

    print("Stopping all current scans. To prevent scan slowdowns.")
    zap.ascan.stop_all_scans()

    # Exclude static from being scanned
    zap.ascan.clear_excluded_from_scan()
    zap.ascan.exclude_from_scan(regex=r".*/v1/(?!bag).*")
    zap.spider.clear_excluded_from_scan()
    zap.spider.exclude_from_scan(regex=r".*/v1/(?!bag).*")
    print(f"Excluded: {zap.ascan.excluded_from_scan}")
    print(f"Excluded from spider: {zap.spider.excluded_from_scan}")

    # start spider to get URL's
    print(f"Spidering target {target}")
    # The scan returns a scan id to support concurrent scanning
    # zap.spider.set_option_max_children = 0
    # zap.spider.set_option_max_depth = 0
    scanID = zap.spider.scan(target)
    run_spider(zap, scanID)

    # with active scanning, attacks are simulated on the target
    print(f"Active Scanning target {target}")
    zap.core.set_mode("ATTACK")
    scanID = zap.ascan.scan(target)
    while int(zap.ascan.status(scanID)) < 100:
        # Loop until the scanner has finished
        print(f"Scan progress: {zap.ascan.status(scanID)}, scan id: {scanID}")
        time.sleep(5)
    print("Active Scan completed")

    # print vulnerabilities found by the scanning
    print("Hosts: {}".format(", ".join(zap.core.hosts)))
    print("Alerts: ")
    alerts = zap.alert.alerts(baseurl=target)
    pprint(alerts)
    print("Total number of alerts: " + str(len(alerts)))

    if any("High" in a["risk"] for a in alerts):
        raise Exception("high risk alert found")


def run_spider(zap, scanID):
    if len(zap.spider.all_urls):
        print("Skip spider action")
    else:
        while int(zap.spider.status(scanID)) < 100:
            # Poll the status until it completes
            print(f"Spider progress: {zap.spider.status(scanID)}, scan id: {scanID}")
            time.sleep(1)

        print("Spider has completed!")
